<?php

// ADMIN

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_profile2_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {

    $profile_types = profile2_get_types();
    if ($profile_types) {    
      // Container
      $form['comment_registration']['comment_registration_profile2_container'] = array(
        '#type' => 'container',
        '#states' => array(
          'visible' => array(
            array(':input[name="comment_registration_enabled"]' => array('checked' => TRUE)),       
          ),
        ),
      );

      // Profile 2 radios
      $options = array('_none' => "None");
      foreach ($profile_types as $type_name => $profile_type) {
        $options[$profile_type->type] = $profile_type->label;
      }
      $form['comment_registration']['comment_registration_profile2_container']['comment_registration_profile2_type'] = array(
        '#type' => 'radios',
        '#title' => t('Comment Registration Profile'),
        '#default_value' => variable_get('comment_registration_profile2_type_' . $form['#node_type']->type, array()),
        '#description' => t('The profile2 to include in comments registrations for this content type.'),
        '#options' => $options,
        '#weight' => 1,
      );
    }
    system_settings_form($form);
  }
  dpm($form);
}

// USER FORM

function comment_registration_profile2_form_comment_form_alter(&$form, &$form_state, $form_id) {

  // Config variables
  $type_name =     variable_get('comment_registration_profile2_type_' . $form['#node']->type, array());

  // Include profile2 on comment registration form
  if (!empty($type_name) && $type_name != '_none') {
    if (empty($form_state['profiles'][$type_name])) {
      $form_state['profiles'][$type_name] = profile2_create(array('type' => $type_name));
    }
    profile2_attach_form($form, $form_state);
  }
  $form['profile_' . $type_name]['#states'] = array(
    'visible' => array(
      array(':input[name="comment_registration_register"]' => array('checked' => TRUE)),       
    ),
  );

  // Wrap profile2 inside in a fieldset.
  $form['profile_' . $type_name] += array(
    '#type' => 'fieldset', 
    '#states' => array(
      'visible' => array(
        array(':input[name="comment_registration_register"]' => array('checked' => TRUE)),       
      ),
    ),
  );
  //dpm($form);
}

function comment_registration_profile2_form_comment_form_validate(&$form, $form_state) {
  //dpm('$submit');
  $form['author']['name']['#value'] = comment_registration_profile2_email_to_username($form['author']['mail']['#value']);
  //dpm($form);
  //dpm($form['author']['name']['#value']);
}

// HELPERS

function comment_registration_profile2_email_to_username($email) {
  // To prepare an e-mail address to be a username, we trim any potential
  // leading and trailing spaces and replace simple illegal characters with
  // hyphens. More could be done with additional illegal characters if
  // necessary, but those typically won't pass e-mail validation anyways.
  // We also limit the username to the maximum length for usernames.
  // @see user_validate_name()
  $username = preg_replace('/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i', '-', trim($email));
  // Remove the e-mail host name so usernames are not valid email adresses.
  // Since usernames are considered public information in Drupal, we must
  // not leak e-mail adresses through usernames.
  $username = preg_replace('/@.*$/', '', $username);
  $username = substr($username, 0, USERNAME_MAX_LENGTH);
  return comment_registration_profile2_unique_username($username);
}

/**
 * Takes a base username and returns a unique version of the username.
 *
 * @param $base
 *   The base from which to construct a unique username.
 *
 * @return
 *   A unique version of the username using appended numbers to avoid duplicates
 *   if the base is already in use.
 */
function comment_registration_profile2_unique_username($base) {
  $username = $base;
  $i = 1;

  while (db_query('SELECT 1 FROM {users} WHERE name = :name', array(':name' => $username))->fetchField()) {
    // Ensure the username does not exceed the maximum character limit.
    if (strlen($base . $i) > USERNAME_MAX_LENGTH) {
      $base = substr($base, 0, strlen($base) - strlen($i));
    }
    $username = $base . $i++;
  }
  return $username;
}