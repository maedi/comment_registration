<?php

/**
 * @file
 * Allow users to register while commenting.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    // Drupal core anonymous commenting dropdown
    $form['comment']['comment_anonymous']['#weight'] = -4;
    // Fieldset
    $form['comment_registration'] = array(
      '#type' => 'fieldset',
      '#title' => t('Comment Registration'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // Message
    $form['comment_registration']['message'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          array(':input[name="comment_anonymous"]' => array('value' => '0')),
        ),
      ),
      'markup' => array(
        '#markup' =>
          'To configure Comment Registration select one of these options under <em>Anonymous commenting</em> in <em>Comment settings:</em><br />' .
          '<ul>' .
            '<li>Anonymous posters may leave their contact information</li>' .
            '<li>Anonymous posters must leave their contact information</li>' .
          '</ul>'
      ),
    );
    // Comment registration enabled?
    $form['comment_registration']['comment_registration_enabled'] = array(
      '#title' => 'Enable comment registration',
      '#description' => t('Allow users to register for accounts via the comment form.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('comment_registration_enabled_' . $form['#node_type']->type, 0),
      '#weight' => -10,
      '#access' => user_access('post comments', drupal_anonymous_user()),
      '#states' => array(
        'unchecked' => array(
          array(':input[name="comment_anonymous"]' => array('value' => '0')),
        ),         
        'visible' => array(
          array(
            array(':input[name="comment_anonymous"]' => array('value' => '1')),
            'or',
            array(':input[name="comment_anonymous"]' => array('value' => '2')),
          ),
        ),       
      ), 
    );    
    // Container
    $form['comment_registration']['comment_registration_container'] = array(
      '#type' => 'container',
      '#weight' => -3,
      '#states' => array(
        'visible' => array(
          array(':input[name="comment_registration_enabled"]' => array('checked' => TRUE)),       
        ),
      ),
    );
    // Comment registration optional?
    $form['comment_registration']['comment_registration_container']['comment_registration_optional'] = array(
      '#title' => 'Comment registration is optional',
      '#description' => t('Allow users to choose if they want to register or post anonymously.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('comment_registration_optional_' . $form['#node_type']->type, 0),
      '#weight' => -2,     
    );
    // Hide Username
    $form['comment_registration']['comment_registration_container']['comment_registration_hide_username'] = array(
      '#title' => 'Email registration',
      '#description' => t('Hide core comment Author field and auto generate username from email.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('comment_registration_hide_username_' . $form['#node_type']->type, 0),
      '#weight' => 2,
    );   
    // Hide Homepage
    $form['comment_registration']['comment_registration_container']['comment_registration_profile2_hide_homepage'] = array(
      '#title' => 'Hide Homepage field',
      '#description' => t('Hide core comment Homepage field.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('comment_registration_profile2_hide_homepage_' . $form['#node_type']->type, 0),
      '#weight' => 4,
    );    
  }
  //dpm($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_form_comment_form_alter(&$form, $form_state) {

  // Config variables
  $hide_homepage = variable_get('comment_registration_profile2_hide_homepage_' . $form['#node']->type, array());

  // Do not proceed if user authenticated, or account creation is set to admin only, or anonymus commenters can't leave contact info, or commment registration is not enabled for this content type
  global $user;
  if ($user->uid > 0 ||
      variable_get('comment_registration_enabled_' . $form['#node']->type, 0) == 0 ||
      variable_get('user_register', USER_REGISTER_ADMINISTRATORS_ONLY) == USER_REGISTER_ADMINISTRATORS_ONLY ||
      variable_get('comment_anonymous_' . $form['#node']->type, COMMENT_ANONYMOUS_MAYNOT_CONTACT) == COMMENT_ANONYMOUS_MAYNOT_CONTACT) {
    return;
  }

  if(isset($form['name']['#default_value']))  {
    $form['name']['#default_value'] = '';
  }

  // Optionally register for account
  $form['comment_registration_register'] = array(
    '#type' => 'checkbox',
    '#title' => t('Register for account with comment.'),
    '#default_value' => '0',
    '#weight' => -2,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'comment_registration') . '/comment_registration.css'),
    ),
  );
  // Enable and hide "register for account" option if comment registration not optional
  $comment_registration_optional = variable_get('comment_registration_optional_' . $form['#node']->type, 0);
  if (empty($comment_registration_optional)) {
    $form['comment_registration_register']['#default_value'] = '1';
    $form['comment_registration_register']['#access'] = FALSE;
  }
  // Account Form
  $form['comment_registration_form'] = array(
    '#type' => 'fieldset',
    '#title' => 'Register',
    '#weight' => -1,
    '#states' => array(
      'visible' => array(
        array(':input[name="comment_registration_register"]' => array('checked' => TRUE)),       
      ),
    ),
  );

  // Hide Fields
  if ($hide_homepage) {
    hide($form['author']['homepage']);
  }

  // get the user registration form
  $user_form_id = 'user_register_form';
  $form['comment_registration_form']['form'] = drupal_retrieve_form($user_form_id, $form_state);

  // allow modules to _form_alter the user registration form (taken from drupal_prepare_form)
  drupal_alter(array('form_' . $user_form_id), $form['comment_registration_form']['form'], $form_state, $user_form_id);

  // rename password field to prevent possible conflict with the user login block form.
  // for some reason core also sets an error on the user login block form fields when the comment name or password field
  // fails, this fixes the password field, haven't figured out how to fix the name field without messing up comment
  // name validation.
  $form['comment_registration_form']['form']['account']['pass2'] = $form['comment_registration_form']['form']['account']['pass'];
  unset($form['comment_registration_form']['form']['account']['pass']);

  // remove the user registration form submit button (will use comment submit)
  unset($form['comment_registration_form']['form']['actions']['submit']);

  // remove the username and email fields from the user registration form (will use comment form fields)
  unset($form['comment_registration_form']['form']['account']['name']);
  unset($form['comment_registration_form']['form']['account']['mail']);

  // add afterbuild handler to remove unnecessary user registration form validation
  $form['comment_registration_form']['form']['#after_build'][] = 'comment_registration_form_after_build';

  // insert custom validation as first item.
  $form['#validate'][] = 'comment_registration_validate';
  $form['#validate'] = array_reverse($form['#validate']);

  // insert custom submit as first item.
  $form['#submit'][] = 'comment_registration_submit';
  $form['#submit'] = array_reverse($form['#submit']);
}

/*
 * After build handler.
 * Need to disable form validation for user register form elements when not registering a user
 * during comment submission.
 */
function comment_registration_form_after_build($form, &$form_state) {
  if ($form_state['values']['comment_registration_register'] != 1) {
    _comment_registration_disable_validation($form);
  }
  return $form;
}

/*
 * Recursive function.
 * Removes required validation for a specified form element and all of its children.
 */
function _comment_registration_disable_validation(&$element) {
  drupal_add_js(drupal_get_path('module', 'comment_registration') . '/comment_registration_comment_form.js');
  drupal_add_css(drupal_get_path('module', 'comment_registration') . '/comment_registration.css');
  drupal_add_js(drupal_get_path('module', 'user') . '/user.js');
  drupal_add_css(drupal_get_path('module', 'user') . '/user.css');
  // bypass validation on password_confirm fapi elements
  isset($element['#element_validate']) ? $element['#element_validate'] = NULL : NULL;

  // bypass validation on other fapi elements
  isset($element['#needs_validation']) ? $element['#needs_validation'] = NULL : NULL;

  foreach (element_children($element) as $key) {
    _comment_registration_disable_validation($element[$key]);
  }
}

/**
 * Validation handler for comment registration form.
 */
function comment_registration_validate($form, &$form_state) {
  if ($form_state['values']['comment_registration_register'] == 1) {
    if (variable_get('comment_anonymous_' . $form['#node']->type, 0) == 1) {
      if (empty($form_state['values']['name'])) {
        form_set_error('name', t('You cannot register while commenting without providing a name.'));
      }
      if (empty($form_state['values']['mail'])) {
        form_set_error('mail', t('You cannot register while commenting without providing an e-mail address.'));
      }
    }
  }
}

/**
 * Submit handler for comment registration form.
 */
function comment_registration_submit($form, &$form_state) {
  if ($form_state['values']['comment_registration_register'] == 1) {

    // Config variables
    $hide_username = variable_get('comment_registration_hide_username_' . $form['#node']->type, array());

    if ($hide_username) {
      //$form['author']['name']['#required'] = FALSE;
      //hide($form['author']['name']);
      array_unshift($form['#validate'], 'comment_registration_profile2_form_comment_form_validate');
    }

    // setup the user registration form and submit via the user registration submit function
    $form['comment_registration_form']['form']['account']['name'] = $form_state['values']['name'];
    $form['comment_registration_form']['form']['account']['mail'] = $form_state['values']['mail'];
    $form['comment_registration_form']['form']['account']['pass'] = $form['comment_registration_form']['form']['account']['pass2'];
    $form_state['values']['pass'] = $form['comment_registration_form']['form']['account']['pass2']['#value']['pass2'];
    unset($form['comment_registration_form']['form']['account']['pass2']);
    unset($form_state['values']['pass2']);

    user_register_submit($form['comment_registration_form']['form'], $form_state);

    // change the author of the current comment to the newly created user
    global $user;
    if ($user->uid > 0) {
      dpm('if');
      $form_state['values']['uid'] = $user->uid;
    }
    elseif ($account = user_load_by_mail($form['comment_registration_form']['form']['account']['mail'])) {
      dpm('elseif');
      $form_state['values']['uid'] = $account->uid;
    }

    // Log user in.
    $form_state['uid'] = $account->uid;
    user_login_submit(array(), $form_state);

    // Log the user in if they created the account and immediate login is enabled.
    //$form_state['redirect'] = logintoboggan_process_login($account, $edit, $redirect);   
  }
}