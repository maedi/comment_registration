<?php

/**
 * @file
 * Allow users to register while commenting.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    drupal_add_js(drupal_get_path('module', 'comment_registration') . '/comment_registration_node_settings.js');
    $form['comment']['comment_registration_enabled'] = array(
      '#title' => 'Enable comment registration',
      '#description' => t('Allow users to register for accounts via the comment form.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('comment_registration_enabled_' . $form['#node_type']->type, 0),
      '#weight' => -1,
    );
    $form['comment']['comment_anonymous']['#weight'] = -1;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_form_comment_form_alter(&$form, $form_state) {

  // if user is not anonymous, or account creation is set to admin only, or anonymus commenters can't leave contact info,
  // or commment registration is not enabled for this content type, do nothing and return.
  global $user;
  if ($user->uid != 0 || variable_get('user_register', 1) == '0' || variable_get('comment_registration_enabled_' . $form['#node']->type, 0) == '0' || variable_get('comment_anonymous_' . $form['#node']->type, 0) == '0') {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'comment_registration') . '/comment_registration_comment_form.js');
  drupal_add_css(drupal_get_path('module', 'comment_registration') . '/comment_registration.css');
  $form['comment_registration_register'] = array(
    '#type' => 'checkbox',
    '#title' => t('Register for account with comment.'),
    '#default_value' => '0',
    '#weight' => -2,
  );
  $form['comment_registration_form'] = array(
    '#type' => 'fieldset',
    '#title' => 'Register',
    '#weight' => -1,
  );

  //.get the user registration form
  $user_form_id = 'user_register_form';
  $form['comment_registration_form']['form'] = drupal_retrieve_form($user_form_id, $form_state);

  // allow modules to _form_alter the user registration form (taken from drupal_prepare_form)
  drupal_alter(array('form_' . $user_form_id), $form['comment_registration_form']['form'], $form_state, $user_form_id);

  // rename password field to prevent possible conflict with the user login block form.
  // for some reason core also sets an error on the user login block form fields when the comment name or password field
  // fails, this fixes the password field, haven't figured out how to fix the name field without messing up comment
  // name validation.
  $form['comment_registration_form']['form']['account']['pass2'] = $form['comment_registration_form']['form']['account']['pass'];
  unset($form['comment_registration_form']['form']['account']['pass']);

  // remove the user registration form submit button (will use comment submit)
  unset($form['comment_registration_form']['form']['actions']['submit']);

  // remove the username and email fields from the user registration form (will use comment form fields)
  unset($form['comment_registration_form']['form']['account']['name']);
  unset($form['comment_registration_form']['form']['account']['mail']);

  // add afterbuild handler to remove unnecessary user registration form validation
  $form['comment_registration_form']['form']['#after_build'][] = 'comment_registration_form_after_build';

  // insert custom validation as first item.
  $form['#validate'][] = 'comment_registration_validate';
  $form['#validate'] = array_reverse($form['#validate']);

  // insert custom submit as first item.
  $form['#submit'][] = 'comment_registration_submit';
  $form['#submit'] = array_reverse($form['#submit']);

}


/*
 * After build handler.
 * Need to disable form validation for user register form elements when not registering a user
 * during comment submission.
 */
function comment_registration_form_after_build($form, &$form_state) {
  if ($form_state['values']['comment_registration_register'] != 1) {
    _comment_registration_disable_validation($form);
  }
  return $form;
}


/*
 * Recursive function.
 * Removes required validation for a specified form element and all of its children.
 */
function _comment_registration_disable_validation(&$element) {
    // bypass validation on password_confirm fapi elements
    isset($element['#element_validate']) ? $element['#element_validate'] = NULL : NULL;

    // bypass validation on other fapi elements
    isset($element['#needs_validation']) ? $element['#needs_validation'] = NULL : NULL;

    foreach (element_children($element) as $key) {
      _comment_registration_disable_validation($element[$key]);
    }
}


/**
 * Validation handler for comment registration form.
 */
function comment_registration_validate($form, &$form_state) {
  // check for the username and email from the appropriate comment form fields
  if (variable_get('comment_anonymous_' . $form['#node']->type, 0) == 1) {
    if (empty($form_state['values']['name'])) {
      form_set_error('name', t('You cannot register while commenting without providing a name.'));
    }
    if (empty($form_state['values']['mail'])) {
      form_set_error('mail', t('You cannot register while commenting without providing an e-mail address.'));
    }
  }
}


/**
 * Submit handler for comment registration form.
 */
function comment_registration_submit($form, &$form_state) {
  if ($form_state['values']['comment_registration_register'] == 1) {

    // setup the user registration form and submit via the user registration submit function
    $form['comment_registration_form']['form']['account']['name'] = $form_state['values']['name'];
    $form['comment_registration_form']['form']['account']['mail'] = $form_state['values']['mail'];
    $form['comment_registration_form']['form']['account']['pass'] = $form['comment_registration_form']['form']['account']['pass2'];
    unset($form['comment_registration_form']['form']['account']['pass2']);
    user_register_submit($form['comment_registration_form']['form'], $form_state);

    // change the author of the current comment to the newly create user
    global $user;
    if ($user->uid > 0) {
      $form_state['values']['uid'] = $user->uid;
    }
    elseif ($account = user_load_by_mail($form['comment_registration_form']['form']['account']['mail'])) {
      $form_state['values']['uid'] = $account->uid;
    }
  }
}
