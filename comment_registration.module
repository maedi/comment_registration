<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    drupal_add_js(drupal_get_path('module', 'comment_registration') . '/comment_registration_node_settings.js');
    $form['comment']['comment_registration_enabled'] = array(
      '#title' => 'Enable comment registration',
      '#description' => t('Allow users to register for accounts via the comment form.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('comment_registration_enabled_' . $form['#node_type']->type, 0), 
      '#weight' => -1,
    );
    $form['comment']['comment_anonymous']['#weight'] = -1;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_registration_form_comment_form_alter(&$form, $form_state) {

  // if user is not anonymous, or account creation is set to admin only, or anonymus commenters can't leave contact info,
  //  or commment registration is not enabled for this content type, do nothing and return.
  global $user;
  if ($user->uid != 0 || variable_get('user_register', 1) == '0' || variable_get('comment_registration_enabled_' . $form['#node']->type, 0) == '0' || variable_get('comment_anonymous_' . $form['#node']->type, 0) == '0') {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'comment_registration') . '/comment_registration_comment_form.js');
  drupal_add_css(drupal_get_path('module', 'comment_registration') . '/comment_registration.css');
  $form['comment_registration_register'] = array(
    '#type' => 'checkbox',
    '#title' => t('Register for new account with comment.'),
    '#default_value' => '0',
    '#weight' => -1,
  );
  
  // if email validation is off, add password fields to comment form (matches core registration behavior).
  if (variable_get('user_email_verification', 1) == '0') {
    $form['comment_registration_password'] = array(
      '#type' => 'password_confirm',
      '#maxlength' => 60,
      '#size' => 30,
      '#required' => TRUE,
      '#weight' => -1,
      '#after_build' => array('comment_registration_after_build'),
    );
  }
  // insert custom submit as first item.
  $form['#submit'][] = 'comment_registration_submit';
  $form['#submit'] = array_reverse($form['#submit']);

}

/**
 * Password_confirm element type #after_build callback.
 */
function comment_registration_after_build($element, &$form_state) {
  // don't validate unnecessary password when the comment registration checkbox is unchecked.
  if ($form_state['values']['comment_registration_register'] == 0) {
    isset($element['#element_validate']) ? $element['#element_validate'] = NULL : NULL;
  }
  return $element;
}

/**
 * Submit handler for comment registration form.
 */
function comment_registration_submit($form, &$form_state) {
  if ($form_state['values']['comment_registration_register'] == 1) {
    if (variable_get('comment_anonymous_' . $form['#node']->type, 0) == 1) {
      if (empty($form_state['values']['name'])) {
        form_set_error('comment registration', t('You cannot register while commenting without providing an username. Your account was not created. Please !register to create an account.', array('!register' => l(t('register'), 'user/register', array('query' => array('destination' => 'node/' . arg(2)))))));
        return;
      }
      if (empty($form_state['values']['mail'])) {
        form_set_error('comment registration', t('You cannot register while commenting without providing an e-mail address. Your account was not created. Please !register to create an account.', array('!register' => l(t('register'), 'user/register', array('query' => array('destination' => 'node/' . arg(2)))))));
        return;
      }
    }
  
    $register = array();
    $register['values']['name'] = $form_state['values']['name'];
    $register['values']['mail'] = $form_state['values']['mail'];
    $register['values']['op'] = t('Create new account');
    if (variable_get('user_email_verification', 1) == '0') {
      $register['values']['pass']['pass1'] = $form_state['values']['comment_registration_password'];
      $register['values']['pass']['pass2'] = $form_state['values']['comment_registration_password'];
    }
    drupal_form_submit('user_register_form', $register);

    global $user;
    if ($user->uid > 0) {
      $form_state['values']['uid'] = $user->uid;
    }
    elseif ($account = user_load_by_mail($register['values']['mail'])) {
      $form_state['values']['uid'] = $account->uid;
    }
  }
}

